# Roadmap and TODO — Tunneling UX and Dev Workflow

This document tracks the end-to-end plan to improve the Cloudflare tunneling experience and streamline the extension development workflow (near hot‑reload for backend; HMR for webview UI).

The plan is grouped into phases. Each task includes intent, acceptance criteria, and primary file references for implementation.

## Goals
- Deliver a smooth Quick Tunnel “just works” path with clear feedback and copy/open URL affordances.
- Redesign Named Tunnel to rely on a hostname + YAML config instead of brittle URL parsing.
- Improve robustness (timeouts, process termination, single source of truth for binary management).
- Add dev quality-of-life: fast watch builds for the extension and HMR for the webview UI.
- Update docs to reflect new behavior and offer guided onboarding.

## Current State (Summary)
- Quick Tunnel: `cloudflared --no-autoupdate tunnel --url http://localhost:<port>`; URL parsed from stdout/stderr. (docs/tunnel.md, src/server/LocalTunnel.ts)
- Named Tunnel: `cloudflared tunnel run <NAME>` when `tunnelName` provided; URL parsing unreliable by nature of named tunnels. (src/server/LocalTunnel.ts)
- Binary prep: `ensureCloudflared()` robust and cross‑platform. (src/server/CloudflaredManager.ts)
- Timeouts: inconsistent (20s vs 60s). (src/server/CloudflaredManager.ts, src/server/LocalTunnel.ts)
- Duplicate binary helpers inside LocalTunnel.

